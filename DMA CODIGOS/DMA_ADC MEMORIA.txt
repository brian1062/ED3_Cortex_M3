//DMA ADC A MEMORIA

#ifdef __USE_CMSIS
#include "LPC17xx.h"
#endif
#include <cr_section_macros.h>



int main(void)
{
	//CONFIGURACION ADC
	LPC_PINCON->PINSEL1|=(1<<14);		//P0.23 COMO AD0.0
	LPC_SC->PCONP|=(1<<12);				//ENERGIZO ADC
	LPC_ADC->ADCR|=(1<<0);				//SELECCIONO CANAL 0
	LPC_ADC->ADCR|=(1<<8);				//ADC A 12.5 MHZ
	LPC_ADC->ADCR|=(1<<16);				//MODO BURST
	LPC_ADC->ADCR|=(1<<21);				//ADC OPERATIVO

	//CONFIGURACION DMA
	LPC_SC->PCONP|=(1<<29);				//ENERGIZO GPDMA
	LPC_GPDMA->DMACConfig|=(1<<0);		//ENABLE DMA
	LPC_GPDMA->DMACSync&=~(1<<4);		//REQUEST 4 (ADC)
	LPC_GPDMA->DMACIntErrClr|=0xFF;		//BAJO BANDERAS
	LPC_GPDMA->DMACIntTCClear|=0xFF;	//BAJO BANDERAS
	LPC_GPDMACH0->DMACCDestAddr=(uint32_t)0x10004000;	//LA PRIMERA DIRECCION DE DESTINO SERÁ 0x10004000
	LPC_GPDMACH0->DMACCSrcAddr=(uint32_t) &(LPC_ADC->ADDR0);	//DIRECCION FUENTE
	LPC_GPDMACH0->DMACCLLI=0;			//NO INTERESA LISTA
	LPC_GPDMACH0->DMACCControl=100|(1<<18)|(1<<21)|(1<<27);		//ESTO ES:
	//100 INDICA LA CANTIDAD DE TRANSFERENCIAS QUE SE DEBEN REALIZAR
	//(1<<18) ES HALFWORD EN LA FUENTE, (1<<21) HALFWORD EN EL DESTINO
	//DE ESTE MODO TRANSFIERO SOLO 2 BYTES EN CADA UNA DE LAS 100 TRANSFERENCIAS
	//(1<<27) LA DIRECCION DE DESTINO SE INCREMENTA LUEGO DE CADA TRANSFERENCIA
	LPC_GPDMACH0->DMACCConfig=(4<<1)|(1<<12);	//(4<<1) INDICA QUE LA FUENTE ES UN PERIFERICO
	//Y QUE 4 ES EL REQUEST (ADC). (1<<12) YA QUE LA TRANSFERENCIA ES DE PERIFERICO A MEMORIA
	LPC_GPDMACH0->DMACCConfig|=(1<<0);		//ENABLE CANAL CERO DMA

    while(1)
    {
    }
    return 0 ;
}
